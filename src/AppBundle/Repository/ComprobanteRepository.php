<?php

namespace AppBundle\Repository;

/**
 * ComprobanteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ComprobanteRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByGeneral_ventas($sucursalId, $fecha_desde, $fecha_hasta, $cliente, $pagado) {
        $query = 'SELECT u  FROM AppBundle:Comprobante u 
                  INNER JOIN u.cliente c
                  WHERE u.activo = 1 
                  AND u.movimiento = \'venta\' ';

        if ($sucursalId > 0)
            $query .= ' AND u.sucursal = :sucursalId ';

        if ($fecha_desde != '')
            $query .= ' AND u.fecha >= :fecha_desde ';

        if ($fecha_hasta != '')
            $query .= ' AND u.fecha <= :fecha_hasta ';

        if ($cliente != '')
            $query .= ' AND (c.nombre LIKE :cliente OR c.documentoNumero LIKE :cliente) ';

        if ($pagado == 'SI') {
            $query .= ' AND u.pendiente = 0 ';
        }
        elseif ($pagado == 'NO') {
            $query .= ' AND u.pendiente > 0 ';
        }

        $query .= ' ORDER BY u.id DESC ';

        $em = $this->getEntityManager()->createQuery($query);

        if ($sucursalId > 0)
            $em->setParameter('sucursalId', $sucursalId);

        if ($fecha_desde != '')
            $em->setParameter('fecha_desde', new \DateTime($fecha_desde));

        if ($fecha_hasta != '')
            $em->setParameter('fecha_hasta', new \DateTime($fecha_hasta));

        if ($cliente != '')
            $em->setParameter('cliente','%' . $cliente . '%');
        
        //return $em;
        return $em->getResult();
    }

    public function findByGeneral_compras($sucursalId, $fecha_desde, $fecha_hasta, $proveedor, $pagado) {
        $query = 'SELECT u  FROM AppBundle:Comprobante u 
                  INNER JOIN u.proveedor p
                  WHERE u.activo = 1 
                  AND u.movimiento = \'compra\' ';

        if ($sucursalId > 0)
            $query .= ' AND u.sucursal = :sucursalId ';

        if ($fecha_desde != '')
            $query .= ' AND u.fecha >= :fecha_desde ';

        if ($fecha_hasta != '')
            $query .= ' AND u.fecha <= :fecha_hasta ';

        if ($proveedor != '')
            $query .= ' AND (p.nombre LIKE :proveedor OR p.documentoNumero LIKE :proveedor) ';

        if ($pagado == 'SI') {
            $query .= ' AND u.pendiente = 0 ';
        }
        elseif ($pagado == 'NO') {
            $query .= ' AND u.pendiente > 0 ';
        }

        $query .= ' ORDER BY u.id DESC ';

        $em = $this->getEntityManager()->createQuery($query);

        if ($sucursalId > 0)
            $em->setParameter('sucursalId', $sucursalId);

        if ($fecha_desde != '')
            $em->setParameter('fecha_desde', new \DateTime($fecha_desde));

        if ($fecha_hasta != '')
            $em->setParameter('fecha_hasta', new \DateTime($fecha_hasta));

        if ($proveedor != '')
            $em->setParameter('proveedor','%' . $proveedor . '%');
        
        //return $em;
        return $em->getResult();
    }

	public function findBy_ventasFacturadasGeneral($fecha_desde, $fecha_hasta, $punto_venta) {
        $query = 'SELECT c FROM AppBundle:Comprobante c 
        			WHERE c.activo = 1
                    AND c.movimiento = \'Venta\'
        			AND c.fecha >= :fecha_desde
        			AND c.fecha <= :fecha_hasta
                    AND c.caeNumero IS NOT NULL ';
        if ($punto_venta)
            $query = $query.' AND c.puntoVenta = :punto_venta';

        $qb = $this->getEntityManager()->createQuery($query)
                ->setParameter('fecha_desde', $fecha_desde)
                ->setParameter('fecha_hasta', $fecha_hasta);

        if ($punto_venta)
            $qb->setParameter('punto_venta', $punto_venta);

        return $qb->getResult();
    }

    public function count_alicuotas($comprobante) {
        $query = 'SELECT cd FROM AppBundle:ComprobanteDetalle cd
                    WHERE cd.activo = 1
                    AND cd.comprobante = :comprobante
                    GROUP BY cd.porcentajeIva ';

        $qb = $this->getEntityManager()->createQuery($query)
                ->setParameter('comprobante', $comprobante);

        return count($qb->getResult());
    }

    public function findLast_recibo($comprobanteId)
    {
        return $this->createQueryBuilder('c')
            ->andWhere('c.id = :id')
            ->setParameter('id', $comprobanteId)
            ->andWhere('c.movimiento = :movimiento')
            ->setParameter('movimiento', 'Venta') // Asumiendo que los recibos son de tipo "Venta"
            ->orderBy('c.fecha', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }
}

